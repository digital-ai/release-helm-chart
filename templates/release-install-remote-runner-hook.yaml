{{- if and .Values.hooks.installReleaseRunner.enabled }}
{{- $name := include "common.tplvalues.render" ( dict "value" .Values.hooks.installReleaseRunner.name "context" $ ) -}}
{{- $rrExists := ((lookup "apps/v1" "StatefulSet" (include "common.names.namespace" .) (.Values.hooks.installReleaseRunner.releaseName | default $name)) | default dict) -}}
{{- if or (not $rrExists) (.Values.hooks.installReleaseRunner.forceExecute | default false) }}
---
kind: Role
apiVersion: {{ include "common.capabilities.rbac.apiVersion" . }}
metadata:
  name: {{ $name }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": {{ .Values.hooks.installReleaseRunner.deletePolicy }}
    "helm.sh/hook-weight": "0"
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["configmaps", "secrets", "serviceaccounts", "services"]
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
  - apiGroups: ["apps"]
    resources: ["statefulsets"]
    verbs: ["create", "delete", "get", "list", "watch"]
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["rolebindings", "roles"]
    verbs: ["create", "delete", "get", "list", "watch"]
  - apiGroups: ["xlr.digital.ai"]
    resources: ["digitalaireleases", "digitalaireleases/status", "digitalaireleases/finalizers"]
    verbs: ["get", "list", "watch"]
---
kind: RoleBinding
apiVersion: {{ include "common.capabilities.rbac.apiVersion" . }}
metadata:
  name: {{ $name }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": {{ .Values.hooks.installReleaseRunner.deletePolicy }}
    "helm.sh/hook-weight": "0"
subjects:
  - kind: ServiceAccount
    name: {{ if eq .Values.k8sSetup.platform "OpenshiftCertified" }}{{ template "release.serviceAccountName" . }}{{ else }}default{{ end }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ $name }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $name }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": {{ .Values.hooks.installReleaseRunner.deletePolicy }}
    "helm.sh/hook-weight": "0"
spec:
  template:
    metadata:
      name: {{ $name }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccount: {{ if eq .Values.k8sSetup.platform "OpenshiftCertified" }}{{ template "release.serviceAccountName" . }}{{ else }}default{{ end }}
      serviceAccountName: {{ if eq .Values.k8sSetup.platform "OpenshiftCertified" }}{{ template "release.serviceAccountName" . }}{{ else }}default{{ end }}
      restartPolicy: Never
      {{- include "release.installReleaseRunner.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-for-release
          image: {{ include "common.images.image" (dict "imageRoot" .Values.busyBox.image "global" .Values.global "context" .) }}
          imagePullPolicy: {{ .Values.busyBox.image.pullPolicy | quote }}
          {{- if .Values.hooks.installReleaseRunner.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.hooks.installReleaseRunner.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          command:
            - /bin/sh
          args:
            - -ec
            - |
              until nc -z -w 2 -v $RELEASE_SVC $RELEASE_PORT && echo release ok; do
                sleep 2;
              done;
          env:
            - name: RELEASE_SVC
              value: {{ include "common.names.fullname" . }}
            - name: RELEASE_PORT
              {{- if .Values.ssl.enabled }}
              value: {{ .Values.service.ports.releaseHttps | quote }}
              {{- else }}
              value: {{ .Values.service.ports.releaseHttp | quote }}
              {{- end }}
          {{- if .Values.defaultInitContainers.resources }}
          resources: {{- toYaml .Values.defaultInitContainers.resources | nindent 12 }}
          {{- end }}
      containers:
        - name: install-runner-job
          image: {{ include "common.images.image" (dict "imageRoot" .Values.hooks.installReleaseRunner.image "global" .Values.global "context" .) }}
          imagePullPolicy: {{ .Values.hooks.installReleaseRunner.image.pullPolicy | quote }}
          {{- if .Values.hooks.installReleaseRunner.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.hooks.installReleaseRunner.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          command:
            - /bin/sh
          args:
            - -ec
            - |
              {{- include "common.tplvalues.render" (dict "value" .Values.hooks.installReleaseRunner.installCommand "context" $) | nindent 14 }}
          {{- if .Values.hooks.installReleaseRunner.answersSecret }}
          env:
          {{- if .Values.hooks.installReleaseRunner.extraEnvVars }}
          {{- include "common.tplvalues.render" (dict "value" .Values.hooks.installReleaseRunner.extraEnvVars "context" $) | nindent 12 }}
          {{- end }}
          {{- end }}
          volumeMounts:
            {{- if .Values.hooks.installReleaseRunner.answersSecret }}
            - name: answers-volume
              readOnly: true
              mountPath: /opt/xebialabs/xl-client/generated_answers.yaml
              subPath: generated_answers.yaml
            {{- end }}
            - name: empty-dir
              mountPath: /opt/xebialabs/.xebialabs
              subPath: .xebialabs
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp
            - name: empty-dir
              mountPath: /.xebialabs
              subPath: .xebialabs
          {{- if .Values.defaultInitContainers.resources }}
          resources: {{- toYaml .Values.defaultInitContainers.resources | nindent 12 }}
          {{- end }}
      volumes:
        {{- if .Values.hooks.installReleaseRunner.answersSecret }}
        - name: answers-volume
          secret:
            secretName: {{ .Values.hooks.installReleaseRunner.answersSecret }}
        {{- end }}
        - name: empty-dir
          emptyDir: {}
{{- end }}
{{- end }}
