apiVersion: v1
kind: Secret
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
type: Opaque
data:
  {{- include "render.value-if-not-secret" (dict "key" "releasePassword" "value" (include "release.secretPassword" .) "source" .Values.auth.adminPassword ) | nindent 2 -}}
  {{- include "render.value-if-not-secret-decode" (dict "key" "releaseLicense" "value" .Values.license "encode2times" true) | nindent 2 -}}
  {{- include "render.value-if-not-secret-binary" (dict "key" "repositoryKeystore" "value" .Values.keystore.keystore) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "repositoryKeystorePassphrase" "value" .Values.keystore.passphrase) | nindent 2 -}}
  {{- include "render.value-if-not-secret-binary" (dict "key" "truststore" "value" .Values.truststore.truststore) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "truststorePassword" "value" .Values.truststore.password) | nindent 2 -}}
  {{- if .Values.pekko.remote.artery.ssl.enabled }}
  {{- include "render.value-if-not-secret" (dict "key" "pekkoArteryKeystoreKeypassword" "value" .Values.pekko.remote.artery.ssl.keystoreKeypassword) | nindent 2 -}}
  {{- include "render.value-if-not-secret-binary" (dict "key" "pekkoArteryKeystore" "value" .Values.pekko.remote.artery.ssl.keystore) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "pekkoArteryKeystorePassword" "value" .Values.pekko.remote.artery.ssl.keystorePassword) | nindent 2 -}}
  {{- include "render.value-if-not-secret-binary" (dict "key" "pekkoArteryTruststore" "value" .Values.pekko.remote.artery.ssl.truststore) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "pekkoArteryTruststorePassword" "value" .Values.pekko.remote.artery.ssl.truststorePassword) | nindent 2 -}}
  {{- end }}
  {{- if .Values.pekko.management.ssl.enabled}}
  {{- include "render.value-if-not-secret-binary" (dict "key" "pekkoManagementKeystore" "value" .Values.pekko.management.ssl.keystore) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "pekkoManagementKeystorePassword" "value" .Values.pekko.management.ssl.keystorePassword) | nindent 2 -}}
  {{- include "render.value-if-not-secret-binary" (dict "key" "pekkoManagementTruststore" "value" .Values.pekko.management.ssl.truststore) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "pekkoManagementTruststorePassword" "value" .Values.pekko.management.ssl.truststorePassword) | nindent 2 -}}
  {{- end }}
  {{- if or .Values.external.db.enabled .Values.postgresql.install }}
  {{- include "render.value-if-not-secret" (dict "key" "mainDatabaseUsername" "value" (include "release.mainUsername" .) "source" .Values.external.db.main.username) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "mainDatabasePassword" "value" (include "release.mainPassword" .) "source" .Values.external.db.main.password) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "reportDatabaseUsername" "value" (include "release.reportUsername" .) "source" .Values.external.db.report.username) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "reportDatabasePassword" "value" (include "release.reportPassword" .) "source" .Values.external.db.report.password) | nindent 2 -}}
  {{- end -}}
  {{- if or .Values.external.mq.enabled .Values.rabbitmq.install }}
  {{- include "render.value-if-not-secret" (dict "key" "rabbitmqUsername" "value" (include "release.mqUsername" .) "source" .Values.external.mq.username) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "rabbitmqPassword" "value" (include "release.mqPassword" .) "source" .Values.external.mq.password) | nindent 2 -}}
  {{- end -}}
  {{- if .Values.oidc.enabled -}}
  {{- include "render.value-if-not-secret" (dict "key" "oidcClientId" "value" .Values.oidc.clientId) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "oidcClientSecret" "value" .Values.oidc.clientSecret) | nindent 2 -}}
  {{- if .Values.oidc.clientAuthJwt.enable -}}
  {{- include "render.value-if-not-secret" (dict "key" "oidcClientAuthJwtKeyStorePassword" "value" .Values.oidc.clientAuthJwt.keyStore.password) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "oidcClientAuthJwtKeyPassword" "value" .Values.oidc.clientAuthJwt.key.password) | nindent 2 -}}
  {{- end -}}
  {{- if .Values.oidc.accessToken.enable -}}
  {{- include "render.value-if-not-secret" (dict "key" "oidcAccessTokenSecretKey" "value" .Values.oidc.accessToken.secretKey) | nindent 2 -}}
  {{- end -}}
  {{- end -}}
  {{- if .Values.ssl.enabled -}}
  {{- include "render.value-if-not-secret-decode" (dict "key" (printf "ssl_keystore.%s" .Values.ssl.keystoreType) "value" .Values.ssl.keystore) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "sslKeystorePassword" "value" .Values.ssl.keystorePassword) | nindent 2 -}}
  {{- include "render.value-if-not-secret" (dict "key" "sslKeystoreKeypassword" "value" .Values.ssl.keystoreKeypassword) | nindent 2 -}}
  {{- end -}}

{{- range $key, $value := .Values.extraSecrets }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ ternary (printf "%s-%s" (include "common.names.namespace" $) $key) $key $.Values.extraSecretsPrependReleaseName }}
  namespace: {{ include "common.names.namespace" $ | quote }}
  labels: {{- include "common.labels.standard" $ | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if $.Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $.Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
type: Opaque
stringData: {{- include "common.tplvalues.render" (dict "value" $value "context" $) | nindent 2 }}
{{- end }}
