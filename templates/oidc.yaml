{{- if .Values.oidc.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: xl-release-conf
  labels:
    app: {{ template "xl-release.name" . }}
    chart: {{ template "xl-release.chart" . }}
    release: {{ .Release.Name }}
data:
  xl-release.conf.template: |
    xl {
    cluster {
        # mode: "default", "hot-standby", "full"
        mode = ${XL_CLUSTER_MODE}
        name = "xl-release_cluster"
        akka {
        loglevel = "INFO"
        actor.debug.receive = off
        remote {
            log-received-messages = off
            log-sent-messages = off
        }
        }
    }

    license {
        kind = ${XL_LICENSE_KIND}
        product = "xl-release"
    }

    database {
        db-driver-classname="${XL_DB_DRIVER}"
        db-password="${XL_DB_PASSWORD}"
        db-url="${XL_DB_URL}"
        db-username=${XL_DB_USERNAME}
        max-pool-size=10
    }

    # TODO XLR does not support (H2) running in one schema.
    reporting {
        db-driver-classname="${XL_DB_DRIVER}"
        db-password="${XL_REPORT_DB_PASSWORD}"
        db-url="${XL_REPORT_DB_URL}"
        db-username=${XL_REPORT_DB_USERNAME}
    }

    # Task queue
    queue {
        embedded=${ENABLE_EMBEDDED_QUEUE}
        password="${XLR_TASK_QUEUE_PASSWORD}"
        queueName="${XLR_TASK_QUEUE_NAME}"
        url="${XLR_TASK_QUEUE_URL}"
        username="${XLR_TASK_QUEUE_USERNAME}"
    }

    metrics {
        enabled = ${XL_METRICS_ENABLED}
    }

    security {
        auth {
            providers {
                oidc {
                    clientId={{ .Values.oidc.clientId | quote }}
                    clientSecret={{ .Values.oidc.clientSecret | quote }}
                    {{- if .Values.oidc.clientAuthMethod }}
                    clientAuthMethod={{ .Values.oidc.clientAuthMethod | quote }}
                    {{- end }}
                    issuer={{ .Values.oidc.issuer | quote }}
                    keyRetrievalUri={{ default "" .Values.oidc.keyRetrievalUri | quote }}
                    accessTokenUri={{ default "" .Values.oidc.accessTokenUri | quote }}
                    userAuthorizationUri={{ default "" .Values.oidc.userAuthorizationUri | quote }}
                    logoutUri={{ default "" .Values.oidc.logoutUri | quote }}
                    redirectUri={{ .Values.oidc.redirectUri | quote }}
                    postLogoutRedirectUri={{ .Values.oidc.postLogoutRedirectUri | quote }}
                    userNameClaim={{ default "" .Values.oidc.userNameClaim | quote }}
                    fullNameClaim={{ default "" .Values.oidc.fullNameClaim | quote }}
                    emailClaim={{ default "" .Values.oidc.emailClaim | quote }}
                    {{- if .Values.oidc.externalIdClaim }}
                    externalIdClaim={{ .Values.oidc.externalIdClaim | quote }}
                    {{- end }}
                    rolesClaim={{ default "" .Values.oidc.rolesClaim | quote }}
                    {{- if .Values.oidc.scopes }}
                    scopes={{ .Values.oidc.scopes }}
                    {{- else }}
                    scopes=["openid"]
                    {{- end }}
                    {{- if .Values.oidc.idTokenJWSAlg }}
                    idTokenJWSAlg={{ .Values.oidc.idTokenJWSAlg | quote }}
                    {{- end }}
                    {{- if .Values.oidc.accessToken.enable }}
                    access-token {
                        issuer={{ default "" .Values.oidc.accessToken.issuer | quote }}
                        audience={{ default "" .Values.oidc.accessToken.audience | quote }}
                        keyRetrievalUri={{ default "" .Values.oidc.accessToken.keyRetrievalUri | quote }}
                        jwsAlg={{ default "" .Values.oidc.accessToken.jwsAlg | quote }}
                        secretKey={{ default "" .Values.oidc.accessToken.secretKey | quote }}
                        }
                    {{- end }}
                    {{- if .Values.oidc.proxyHost }}
                    proxyHost={{ .Values.oidc.proxyHost | quote }}
                    {{- end }}
                    {{- if .Values.oidc.proxyPort }}
                    proxyPort={{ .Values.oidc.proxyPort | quote }}
                    {{- end }}
                }
            }
        }
    }
    }
{{- end }}
